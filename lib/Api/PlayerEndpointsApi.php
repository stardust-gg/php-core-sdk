<?php
/**
 * PlayerEndpointsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stardust API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stardust\Core\Stardust\Core\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Stardust\Core\ApiException;
use Stardust\Core\Configuration;
use Stardust\Core\HeaderSelector;
use Stardust\Core\ObjectSerializer;

/**
 * PlayerEndpointsApi Class Doc Comment
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlayerEndpointsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'playerCountGet' => [
            'application/json',
        ],
        'playerCreatePost' => [
            'application/json',
        ],
        'playerGetAllGet' => [
            'application/json',
        ],
        'playerGetGet' => [
            'application/json',
        ],
        'playerGetIdGet' => [
            'application/json',
        ],
        'playerGetIdsGet' => [
            'application/json',
        ],
        'playerGetInventoryGet' => [
            'application/json',
        ],
        'playerMutatePut' => [
            'application/json',
        ],
        'playerRemoveDelete' => [
            'application/json',
        ],
        'playerWalletGetGet' => [
            'application/json',
        ],
        'playerWithdrawPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation playerCountGet
     *
     * Get Player Count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCountGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerCountGet(string $contentType = self::contentTypes['playerCountGet'][0])
    {
        list($response) = $this->playerCountGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation playerCountGetWithHttpInfo
     *
     * Get Player Count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCountGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerCountGetWithHttpInfo(string $contentType = self::contentTypes['playerCountGet'][0])
    {
        $request = $this->playerCountGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerCountGetAsync
     *
     * Get Player Count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerCountGetAsync(string $contentType = self::contentTypes['playerCountGet'][0])
    {
        return $this->playerCountGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerCountGetAsyncWithHttpInfo
     *
     * Get Player Count
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerCountGetAsyncWithHttpInfo(string $contentType = self::contentTypes['playerCountGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerCountResponse';
        $request = $this->playerCountGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerCountGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerCountGetRequest(string $contentType = self::contentTypes['playerCountGet'][0])
    {


        $resourcePath = '/player/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerCreatePost
     *
     * Create Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerCreateRequest $sd_player_create_request sd_player_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCreatePost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerCreatePost($sd_player_create_request, string $contentType = self::contentTypes['playerCreatePost'][0])
    {
        list($response) = $this->playerCreatePostWithHttpInfo($sd_player_create_request, $contentType);
        return $response;
    }

    /**
     * Operation playerCreatePostWithHttpInfo
     *
     * Create Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerCreateRequest $sd_player_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCreatePost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerCreatePostWithHttpInfo($sd_player_create_request, string $contentType = self::contentTypes['playerCreatePost'][0])
    {
        $request = $this->playerCreatePostRequest($sd_player_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerCreatePostAsync
     *
     * Create Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerCreateRequest $sd_player_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerCreatePostAsync($sd_player_create_request, string $contentType = self::contentTypes['playerCreatePost'][0])
    {
        return $this->playerCreatePostAsyncWithHttpInfo($sd_player_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerCreatePostAsyncWithHttpInfo
     *
     * Create Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerCreateRequest $sd_player_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerCreatePostAsyncWithHttpInfo($sd_player_create_request, string $contentType = self::contentTypes['playerCreatePost'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerCreateResponse';
        $request = $this->playerCreatePostRequest($sd_player_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerCreatePost'
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerCreateRequest $sd_player_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerCreatePostRequest($sd_player_create_request, string $contentType = self::contentTypes['playerCreatePost'][0])
    {

        // verify the required parameter 'sd_player_create_request' is set
        if ($sd_player_create_request === null || (is_array($sd_player_create_request) && count($sd_player_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_player_create_request when calling playerCreatePost'
            );
        }


        $resourcePath = '/player/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sd_player_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sd_player_create_request));
            } else {
                $httpBody = $sd_player_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerGetAllGet
     *
     * Get All Players
     *
     * @param  string $start position in list (optional)
     * @param  string $filter Find a substring within the Player unique ID field (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetAllGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerGetAllGet($start = null, $filter = null, $limit = null, string $contentType = self::contentTypes['playerGetAllGet'][0])
    {
        list($response) = $this->playerGetAllGetWithHttpInfo($start, $filter, $limit, $contentType);
        return $response;
    }

    /**
     * Operation playerGetAllGetWithHttpInfo
     *
     * Get All Players
     *
     * @param  string $start position in list (optional)
     * @param  string $filter Find a substring within the Player unique ID field (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetAllGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerGetAllGetWithHttpInfo($start = null, $filter = null, $limit = null, string $contentType = self::contentTypes['playerGetAllGet'][0])
    {
        $request = $this->playerGetAllGetRequest($start, $filter, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerGetAllGetAsync
     *
     * Get All Players
     *
     * @param  string $start position in list (optional)
     * @param  string $filter Find a substring within the Player unique ID field (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetAllGetAsync($start = null, $filter = null, $limit = null, string $contentType = self::contentTypes['playerGetAllGet'][0])
    {
        return $this->playerGetAllGetAsyncWithHttpInfo($start, $filter, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerGetAllGetAsyncWithHttpInfo
     *
     * Get All Players
     *
     * @param  string $start position in list (optional)
     * @param  string $filter Find a substring within the Player unique ID field (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetAllGetAsyncWithHttpInfo($start = null, $filter = null, $limit = null, string $contentType = self::contentTypes['playerGetAllGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetAllResponse[]';
        $request = $this->playerGetAllGetRequest($start, $filter, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerGetAllGet'
     *
     * @param  string $start position in list (optional)
     * @param  string $filter Find a substring within the Player unique ID field (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerGetAllGetRequest($start = null, $filter = null, $limit = null, string $contentType = self::contentTypes['playerGetAllGet'][0])
    {





        $resourcePath = '/player/get-all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerGetGet
     *
     * Get Player
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerGetGet($player_id, string $contentType = self::contentTypes['playerGetGet'][0])
    {
        list($response) = $this->playerGetGetWithHttpInfo($player_id, $contentType);
        return $response;
    }

    /**
     * Operation playerGetGetWithHttpInfo
     *
     * Get Player
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerGetGetWithHttpInfo($player_id, string $contentType = self::contentTypes['playerGetGet'][0])
    {
        $request = $this->playerGetGetRequest($player_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerGetGetAsync
     *
     * Get Player
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetGetAsync($player_id, string $contentType = self::contentTypes['playerGetGet'][0])
    {
        return $this->playerGetGetAsyncWithHttpInfo($player_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerGetGetAsyncWithHttpInfo
     *
     * Get Player
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetGetAsyncWithHttpInfo($player_id, string $contentType = self::contentTypes['playerGetGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetResponse';
        $request = $this->playerGetGetRequest($player_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerGetGet'
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerGetGetRequest($player_id, string $contentType = self::contentTypes['playerGetGet'][0])
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling playerGetGet'
            );
        }


        $resourcePath = '/player/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $player_id,
            'playerId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerGetIdGet
     *
     * Get Player ID
     *
     * @param  string $unique_id Player&#39;s Unique ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerGetIdGet($unique_id, string $contentType = self::contentTypes['playerGetIdGet'][0])
    {
        list($response) = $this->playerGetIdGetWithHttpInfo($unique_id, $contentType);
        return $response;
    }

    /**
     * Operation playerGetIdGetWithHttpInfo
     *
     * Get Player ID
     *
     * @param  string $unique_id Player&#39;s Unique ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerGetIdGetWithHttpInfo($unique_id, string $contentType = self::contentTypes['playerGetIdGet'][0])
    {
        $request = $this->playerGetIdGetRequest($unique_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerGetIdGetAsync
     *
     * Get Player ID
     *
     * @param  string $unique_id Player&#39;s Unique ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetIdGetAsync($unique_id, string $contentType = self::contentTypes['playerGetIdGet'][0])
    {
        return $this->playerGetIdGetAsyncWithHttpInfo($unique_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerGetIdGetAsyncWithHttpInfo
     *
     * Get Player ID
     *
     * @param  string $unique_id Player&#39;s Unique ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetIdGetAsyncWithHttpInfo($unique_id, string $contentType = self::contentTypes['playerGetIdGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdResponse';
        $request = $this->playerGetIdGetRequest($unique_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerGetIdGet'
     *
     * @param  string $unique_id Player&#39;s Unique ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerGetIdGetRequest($unique_id, string $contentType = self::contentTypes['playerGetIdGet'][0])
    {

        // verify the required parameter 'unique_id' is set
        if ($unique_id === null || (is_array($unique_id) && count($unique_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unique_id when calling playerGetIdGet'
            );
        }


        $resourcePath = '/player/get-id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unique_id,
            'uniqueId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerGetIdsGet
     *
     * Get All Player IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdsGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerGetIdsGet(string $contentType = self::contentTypes['playerGetIdsGet'][0])
    {
        list($response) = $this->playerGetIdsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation playerGetIdsGetWithHttpInfo
     *
     * Get All Player IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdsGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerGetIdsGetWithHttpInfo(string $contentType = self::contentTypes['playerGetIdsGet'][0])
    {
        $request = $this->playerGetIdsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerGetIdsGetAsync
     *
     * Get All Player IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetIdsGetAsync(string $contentType = self::contentTypes['playerGetIdsGet'][0])
    {
        return $this->playerGetIdsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerGetIdsGetAsyncWithHttpInfo
     *
     * Get All Player IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetIdsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['playerGetIdsGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetIdsResponse[]';
        $request = $this->playerGetIdsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerGetIdsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetIdsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerGetIdsGetRequest(string $contentType = self::contentTypes['playerGetIdsGet'][0])
    {


        $resourcePath = '/player/get-ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerGetInventoryGet
     *
     * Get Player Inventory
     *
     * @param  string $player_id Player id (required)
     * @param  string $start position in list (optional)
     * @param  string $token_ids Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetInventoryGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerGetInventoryGet($player_id, $start = null, $token_ids = null, $limit = null, string $contentType = self::contentTypes['playerGetInventoryGet'][0])
    {
        list($response) = $this->playerGetInventoryGetWithHttpInfo($player_id, $start, $token_ids, $limit, $contentType);
        return $response;
    }

    /**
     * Operation playerGetInventoryGetWithHttpInfo
     *
     * Get Player Inventory
     *
     * @param  string $player_id Player id (required)
     * @param  string $start position in list (optional)
     * @param  string $token_ids Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetInventoryGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerGetInventoryGetWithHttpInfo($player_id, $start = null, $token_ids = null, $limit = null, string $contentType = self::contentTypes['playerGetInventoryGet'][0])
    {
        $request = $this->playerGetInventoryGetRequest($player_id, $start, $token_ids, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerGetInventoryGetAsync
     *
     * Get Player Inventory
     *
     * @param  string $player_id Player id (required)
     * @param  string $start position in list (optional)
     * @param  string $token_ids Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetInventoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetInventoryGetAsync($player_id, $start = null, $token_ids = null, $limit = null, string $contentType = self::contentTypes['playerGetInventoryGet'][0])
    {
        return $this->playerGetInventoryGetAsyncWithHttpInfo($player_id, $start, $token_ids, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerGetInventoryGetAsyncWithHttpInfo
     *
     * Get Player Inventory
     *
     * @param  string $player_id Player id (required)
     * @param  string $start position in list (optional)
     * @param  string $token_ids Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetInventoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerGetInventoryGetAsyncWithHttpInfo($player_id, $start = null, $token_ids = null, $limit = null, string $contentType = self::contentTypes['playerGetInventoryGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerGetInventoryResponse[]';
        $request = $this->playerGetInventoryGetRequest($player_id, $start, $token_ids, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerGetInventoryGet'
     *
     * @param  string $player_id Player id (required)
     * @param  string $start position in list (optional)
     * @param  string $token_ids Comma-Separated String of token ids (ex. &#39;3589, 3580&#39;) (optional)
     * @param  string $limit maximum items returned in list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerGetInventoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerGetInventoryGetRequest($player_id, $start = null, $token_ids = null, $limit = null, string $contentType = self::contentTypes['playerGetInventoryGet'][0])
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling playerGetInventoryGet'
            );
        }





        $resourcePath = '/player/get-inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token_ids,
            'tokenIds', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $player_id,
            'playerId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerMutatePut
     *
     * Mutate Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerMutateRequest $sd_player_mutate_request sd_player_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerMutatePut'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerMutatePut($sd_player_mutate_request, string $contentType = self::contentTypes['playerMutatePut'][0])
    {
        list($response) = $this->playerMutatePutWithHttpInfo($sd_player_mutate_request, $contentType);
        return $response;
    }

    /**
     * Operation playerMutatePutWithHttpInfo
     *
     * Mutate Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerMutateRequest $sd_player_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerMutatePut'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerMutatePutWithHttpInfo($sd_player_mutate_request, string $contentType = self::contentTypes['playerMutatePut'][0])
    {
        $request = $this->playerMutatePutRequest($sd_player_mutate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerMutatePutAsync
     *
     * Mutate Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerMutateRequest $sd_player_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerMutatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerMutatePutAsync($sd_player_mutate_request, string $contentType = self::contentTypes['playerMutatePut'][0])
    {
        return $this->playerMutatePutAsyncWithHttpInfo($sd_player_mutate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerMutatePutAsyncWithHttpInfo
     *
     * Mutate Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerMutateRequest $sd_player_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerMutatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerMutatePutAsyncWithHttpInfo($sd_player_mutate_request, string $contentType = self::contentTypes['playerMutatePut'][0])
    {
        $returnType = 'object';
        $request = $this->playerMutatePutRequest($sd_player_mutate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerMutatePut'
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerMutateRequest $sd_player_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerMutatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerMutatePutRequest($sd_player_mutate_request, string $contentType = self::contentTypes['playerMutatePut'][0])
    {

        // verify the required parameter 'sd_player_mutate_request' is set
        if ($sd_player_mutate_request === null || (is_array($sd_player_mutate_request) && count($sd_player_mutate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_player_mutate_request when calling playerMutatePut'
            );
        }


        $resourcePath = '/player/mutate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sd_player_mutate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sd_player_mutate_request));
            } else {
                $httpBody = $sd_player_mutate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerRemoveDelete
     *
     * Remove Player
     *
     * @param  string $player_id Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerRemoveDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerRemoveDelete($player_id, string $contentType = self::contentTypes['playerRemoveDelete'][0])
    {
        list($response) = $this->playerRemoveDeleteWithHttpInfo($player_id, $contentType);
        return $response;
    }

    /**
     * Operation playerRemoveDeleteWithHttpInfo
     *
     * Remove Player
     *
     * @param  string $player_id Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerRemoveDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerRemoveDeleteWithHttpInfo($player_id, string $contentType = self::contentTypes['playerRemoveDelete'][0])
    {
        $request = $this->playerRemoveDeleteRequest($player_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerRemoveDeleteAsync
     *
     * Remove Player
     *
     * @param  string $player_id Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerRemoveDeleteAsync($player_id, string $contentType = self::contentTypes['playerRemoveDelete'][0])
    {
        return $this->playerRemoveDeleteAsyncWithHttpInfo($player_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerRemoveDeleteAsyncWithHttpInfo
     *
     * Remove Player
     *
     * @param  string $player_id Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerRemoveDeleteAsyncWithHttpInfo($player_id, string $contentType = self::contentTypes['playerRemoveDelete'][0])
    {
        $returnType = 'object';
        $request = $this->playerRemoveDeleteRequest($player_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerRemoveDelete'
     *
     * @param  string $player_id Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerRemoveDeleteRequest($player_id, string $contentType = self::contentTypes['playerRemoveDelete'][0])
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling playerRemoveDelete'
            );
        }


        $resourcePath = '/player/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $player_id,
            'playerId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerWalletGetGet
     *
     * Get Player Wallet
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWalletGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerWalletGetGet($player_id, string $contentType = self::contentTypes['playerWalletGetGet'][0])
    {
        list($response) = $this->playerWalletGetGetWithHttpInfo($player_id, $contentType);
        return $response;
    }

    /**
     * Operation playerWalletGetGetWithHttpInfo
     *
     * Get Player Wallet
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWalletGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerWalletGetGetWithHttpInfo($player_id, string $contentType = self::contentTypes['playerWalletGetGet'][0])
    {
        $request = $this->playerWalletGetGetRequest($player_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerWalletGetGetAsync
     *
     * Get Player Wallet
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWalletGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerWalletGetGetAsync($player_id, string $contentType = self::contentTypes['playerWalletGetGet'][0])
    {
        return $this->playerWalletGetGetAsyncWithHttpInfo($player_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerWalletGetGetAsyncWithHttpInfo
     *
     * Get Player Wallet
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWalletGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerWalletGetGetAsyncWithHttpInfo($player_id, string $contentType = self::contentTypes['playerWalletGetGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDPlayerWalletGetResponse';
        $request = $this->playerWalletGetGetRequest($player_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerWalletGetGet'
     *
     * @param  string $player_id Player id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWalletGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerWalletGetGetRequest($player_id, string $contentType = self::contentTypes['playerWalletGetGet'][0])
    {

        // verify the required parameter 'player_id' is set
        if ($player_id === null || (is_array($player_id) && count($player_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $player_id when calling playerWalletGetGet'
            );
        }


        $resourcePath = '/player/wallet-get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $player_id,
            'playerId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation playerWithdrawPost
     *
     * Withdraw From Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerWithdrawRequest $sd_player_withdraw_request sd_player_withdraw_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWithdrawPost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function playerWithdrawPost($sd_player_withdraw_request, string $contentType = self::contentTypes['playerWithdrawPost'][0])
    {
        list($response) = $this->playerWithdrawPostWithHttpInfo($sd_player_withdraw_request, $contentType);
        return $response;
    }

    /**
     * Operation playerWithdrawPostWithHttpInfo
     *
     * Withdraw From Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerWithdrawRequest $sd_player_withdraw_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWithdrawPost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function playerWithdrawPostWithHttpInfo($sd_player_withdraw_request, string $contentType = self::contentTypes['playerWithdrawPost'][0])
    {
        $request = $this->playerWithdrawPostRequest($sd_player_withdraw_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation playerWithdrawPostAsync
     *
     * Withdraw From Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerWithdrawRequest $sd_player_withdraw_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWithdrawPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerWithdrawPostAsync($sd_player_withdraw_request, string $contentType = self::contentTypes['playerWithdrawPost'][0])
    {
        return $this->playerWithdrawPostAsyncWithHttpInfo($sd_player_withdraw_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation playerWithdrawPostAsyncWithHttpInfo
     *
     * Withdraw From Player
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerWithdrawRequest $sd_player_withdraw_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWithdrawPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function playerWithdrawPostAsyncWithHttpInfo($sd_player_withdraw_request, string $contentType = self::contentTypes['playerWithdrawPost'][0])
    {
        $returnType = 'object';
        $request = $this->playerWithdrawPostRequest($sd_player_withdraw_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'playerWithdrawPost'
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDPlayerWithdrawRequest $sd_player_withdraw_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['playerWithdrawPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function playerWithdrawPostRequest($sd_player_withdraw_request, string $contentType = self::contentTypes['playerWithdrawPost'][0])
    {

        // verify the required parameter 'sd_player_withdraw_request' is set
        if ($sd_player_withdraw_request === null || (is_array($sd_player_withdraw_request) && count($sd_player_withdraw_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_player_withdraw_request when calling playerWithdrawPost'
            );
        }


        $resourcePath = '/player/withdraw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sd_player_withdraw_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sd_player_withdraw_request));
            } else {
                $httpBody = $sd_player_withdraw_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
