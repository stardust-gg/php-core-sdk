<?php
/**
 * OrderEndpointsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stardust API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stardust\Core\Stardust\Core\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Stardust\Core\ApiException;
use Stardust\Core\Configuration;
use Stardust\Core\HeaderSelector;
use Stardust\Core\ObjectSerializer;

/**
 * OrderEndpointsApi Class Doc Comment
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderEndpointsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'orderBuyPost' => [
            'application/json',
        ],
        'orderCancelDelete' => [
            'application/json',
        ],
        'orderCreatePost' => [
            'application/json',
        ],
        'orderGetAllGet' => [
            'application/json',
        ],
        'orderGetGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderBuyPost
     *
     * Buy Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderBuyRequest $sd_order_buy_request sd_order_buy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderBuyPost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function orderBuyPost($sd_order_buy_request, string $contentType = self::contentTypes['orderBuyPost'][0])
    {
        list($response) = $this->orderBuyPostWithHttpInfo($sd_order_buy_request, $contentType);
        return $response;
    }

    /**
     * Operation orderBuyPostWithHttpInfo
     *
     * Buy Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderBuyRequest $sd_order_buy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderBuyPost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderBuyPostWithHttpInfo($sd_order_buy_request, string $contentType = self::contentTypes['orderBuyPost'][0])
    {
        $request = $this->orderBuyPostRequest($sd_order_buy_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderBuyPostAsync
     *
     * Buy Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderBuyRequest $sd_order_buy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderBuyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderBuyPostAsync($sd_order_buy_request, string $contentType = self::contentTypes['orderBuyPost'][0])
    {
        return $this->orderBuyPostAsyncWithHttpInfo($sd_order_buy_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderBuyPostAsyncWithHttpInfo
     *
     * Buy Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderBuyRequest $sd_order_buy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderBuyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderBuyPostAsyncWithHttpInfo($sd_order_buy_request, string $contentType = self::contentTypes['orderBuyPost'][0])
    {
        $returnType = 'object';
        $request = $this->orderBuyPostRequest($sd_order_buy_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderBuyPost'
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderBuyRequest $sd_order_buy_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderBuyPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderBuyPostRequest($sd_order_buy_request, string $contentType = self::contentTypes['orderBuyPost'][0])
    {

        // verify the required parameter 'sd_order_buy_request' is set
        if ($sd_order_buy_request === null || (is_array($sd_order_buy_request) && count($sd_order_buy_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_order_buy_request when calling orderBuyPost'
            );
        }


        $resourcePath = '/order/buy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sd_order_buy_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sd_order_buy_request));
            } else {
                $httpBody = $sd_order_buy_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderCancelDelete
     *
     * Cancel Order
     *
     * @param  string $order_id Order Id unsigned 32 bit integer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCancelDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function orderCancelDelete($order_id, string $contentType = self::contentTypes['orderCancelDelete'][0])
    {
        list($response) = $this->orderCancelDeleteWithHttpInfo($order_id, $contentType);
        return $response;
    }

    /**
     * Operation orderCancelDeleteWithHttpInfo
     *
     * Cancel Order
     *
     * @param  string $order_id Order Id unsigned 32 bit integer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCancelDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCancelDeleteWithHttpInfo($order_id, string $contentType = self::contentTypes['orderCancelDelete'][0])
    {
        $request = $this->orderCancelDeleteRequest($order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderCancelDeleteAsync
     *
     * Cancel Order
     *
     * @param  string $order_id Order Id unsigned 32 bit integer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCancelDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCancelDeleteAsync($order_id, string $contentType = self::contentTypes['orderCancelDelete'][0])
    {
        return $this->orderCancelDeleteAsyncWithHttpInfo($order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCancelDeleteAsyncWithHttpInfo
     *
     * Cancel Order
     *
     * @param  string $order_id Order Id unsigned 32 bit integer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCancelDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCancelDeleteAsyncWithHttpInfo($order_id, string $contentType = self::contentTypes['orderCancelDelete'][0])
    {
        $returnType = 'object';
        $request = $this->orderCancelDeleteRequest($order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCancelDelete'
     *
     * @param  string $order_id Order Id unsigned 32 bit integer (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCancelDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderCancelDeleteRequest($order_id, string $contentType = self::contentTypes['orderCancelDelete'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderCancelDelete'
            );
        }


        $resourcePath = '/order/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderCreatePost
     *
     * Create Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderCreateRequest $sd_order_create_request sd_order_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCreatePost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function orderCreatePost($sd_order_create_request, string $contentType = self::contentTypes['orderCreatePost'][0])
    {
        list($response) = $this->orderCreatePostWithHttpInfo($sd_order_create_request, $contentType);
        return $response;
    }

    /**
     * Operation orderCreatePostWithHttpInfo
     *
     * Create Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderCreateRequest $sd_order_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCreatePost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCreatePostWithHttpInfo($sd_order_create_request, string $contentType = self::contentTypes['orderCreatePost'][0])
    {
        $request = $this->orderCreatePostRequest($sd_order_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderCreatePostAsync
     *
     * Create Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderCreateRequest $sd_order_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreatePostAsync($sd_order_create_request, string $contentType = self::contentTypes['orderCreatePost'][0])
    {
        return $this->orderCreatePostAsyncWithHttpInfo($sd_order_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCreatePostAsyncWithHttpInfo
     *
     * Create Order
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderCreateRequest $sd_order_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreatePostAsyncWithHttpInfo($sd_order_create_request, string $contentType = self::contentTypes['orderCreatePost'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDOrderCreateResponse';
        $request = $this->orderCreatePostRequest($sd_order_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCreatePost'
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDOrderCreateRequest $sd_order_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderCreatePostRequest($sd_order_create_request, string $contentType = self::contentTypes['orderCreatePost'][0])
    {

        // verify the required parameter 'sd_order_create_request' is set
        if ($sd_order_create_request === null || (is_array($sd_order_create_request) && count($sd_order_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_order_create_request when calling orderCreatePost'
            );
        }


        $resourcePath = '/order/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sd_order_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sd_order_create_request));
            } else {
                $httpBody = $sd_order_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetAllGet
     *
     * Get All Orders
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $player_id A Games PlayerId to filter by player (optional)
     * @param  string $status State of the order to filter. Default is offer. (&#39;offer&#39;, &#39;accepted&#39;, &#39;cancelled&#39;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetAllGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function orderGetAllGet($start, $limit, $player_id = null, $status = null, string $contentType = self::contentTypes['orderGetAllGet'][0])
    {
        list($response) = $this->orderGetAllGetWithHttpInfo($start, $limit, $player_id, $status, $contentType);
        return $response;
    }

    /**
     * Operation orderGetAllGetWithHttpInfo
     *
     * Get All Orders
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $player_id A Games PlayerId to filter by player (optional)
     * @param  string $status State of the order to filter. Default is offer. (&#39;offer&#39;, &#39;accepted&#39;, &#39;cancelled&#39;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetAllGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetAllGetWithHttpInfo($start, $limit, $player_id = null, $status = null, string $contentType = self::contentTypes['orderGetAllGet'][0])
    {
        $request = $this->orderGetAllGetRequest($start, $limit, $player_id, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetAllGetAsync
     *
     * Get All Orders
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $player_id A Games PlayerId to filter by player (optional)
     * @param  string $status State of the order to filter. Default is offer. (&#39;offer&#39;, &#39;accepted&#39;, &#39;cancelled&#39;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetAllGetAsync($start, $limit, $player_id = null, $status = null, string $contentType = self::contentTypes['orderGetAllGet'][0])
    {
        return $this->orderGetAllGetAsyncWithHttpInfo($start, $limit, $player_id, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetAllGetAsyncWithHttpInfo
     *
     * Get All Orders
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $player_id A Games PlayerId to filter by player (optional)
     * @param  string $status State of the order to filter. Default is offer. (&#39;offer&#39;, &#39;accepted&#39;, &#39;cancelled&#39;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetAllGetAsyncWithHttpInfo($start, $limit, $player_id = null, $status = null, string $contentType = self::contentTypes['orderGetAllGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDOrderGetAllResponse[]';
        $request = $this->orderGetAllGetRequest($start, $limit, $player_id, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetAllGet'
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $player_id A Games PlayerId to filter by player (optional)
     * @param  string $status State of the order to filter. Default is offer. (&#39;offer&#39;, &#39;accepted&#39;, &#39;cancelled&#39;) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderGetAllGetRequest($start, $limit, $player_id = null, $status = null, string $contentType = self::contentTypes['orderGetAllGet'][0])
    {

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling orderGetAllGet'
            );
        }

        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling orderGetAllGet'
            );
        }




        $resourcePath = '/order/get-all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $player_id,
            'playerId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetGet
     *
     * Get Order
     *
     * @param  string $order_id An Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDOrderGetResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function orderGetGet($order_id, string $contentType = self::contentTypes['orderGetGet'][0])
    {
        list($response) = $this->orderGetGetWithHttpInfo($order_id, $contentType);
        return $response;
    }

    /**
     * Operation orderGetGetWithHttpInfo
     *
     * Get Order
     *
     * @param  string $order_id An Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDOrderGetResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetGetWithHttpInfo($order_id, string $contentType = self::contentTypes['orderGetGet'][0])
    {
        $request = $this->orderGetGetRequest($order_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDOrderGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDOrderGetResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDOrderGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDOrderGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDOrderGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetGetAsync
     *
     * Get Order
     *
     * @param  string $order_id An Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetGetAsync($order_id, string $contentType = self::contentTypes['orderGetGet'][0])
    {
        return $this->orderGetGetAsyncWithHttpInfo($order_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetGetAsyncWithHttpInfo
     *
     * Get Order
     *
     * @param  string $order_id An Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetGetAsyncWithHttpInfo($order_id, string $contentType = self::contentTypes['orderGetGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDOrderGetResponse';
        $request = $this->orderGetGetRequest($order_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetGet'
     *
     * @param  string $order_id An Order ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['orderGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderGetGetRequest($order_id, string $contentType = self::contentTypes['orderGetGet'][0])
    {

        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling orderGetGet'
            );
        }


        $resourcePath = '/order/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
