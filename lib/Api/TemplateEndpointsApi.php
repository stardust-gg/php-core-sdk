<?php
/**
 * TemplateEndpointsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stardust API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stardust\Core\Stardust\Core\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Stardust\Core\ApiException;
use Stardust\Core\Configuration;
use Stardust\Core\HeaderSelector;
use Stardust\Core\ObjectSerializer;

/**
 * TemplateEndpointsApi Class Doc Comment
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TemplateEndpointsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'templateCountGet' => [
            'application/json',
        ],
        'templateCreatePost' => [
            'application/json',
        ],
        'templateGetAllGet' => [
            'application/json',
        ],
        'templateGetGet' => [
            'application/json',
        ],
        'templateGetTokensGet' => [
            'application/json',
        ],
        'templateMutatePut' => [
            'application/json',
        ],
        'templatePropsRemoveDelete' => [
            'application/json',
        ],
        'templateRemoveDelete' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation templateCountGet
     *
     * Get Template Count
     *
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCountGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templateCountGet($filter = null, string $contentType = self::contentTypes['templateCountGet'][0])
    {
        list($response) = $this->templateCountGetWithHttpInfo($filter, $contentType);
        return $response;
    }

    /**
     * Operation templateCountGetWithHttpInfo
     *
     * Get Template Count
     *
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCountGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templateCountGetWithHttpInfo($filter = null, string $contentType = self::contentTypes['templateCountGet'][0])
    {
        $request = $this->templateCountGetRequest($filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateCountGetAsync
     *
     * Get Template Count
     *
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateCountGetAsync($filter = null, string $contentType = self::contentTypes['templateCountGet'][0])
    {
        return $this->templateCountGetAsyncWithHttpInfo($filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateCountGetAsyncWithHttpInfo
     *
     * Get Template Count
     *
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateCountGetAsyncWithHttpInfo($filter = null, string $contentType = self::contentTypes['templateCountGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateCountResponse';
        $request = $this->templateCountGetRequest($filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateCountGet'
     *
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCountGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templateCountGetRequest($filter = null, string $contentType = self::contentTypes['templateCountGet'][0])
    {



        $resourcePath = '/template/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateCreatePost
     *
     * Create Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateCreateRequest $sd_template_create_request sd_template_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCreatePost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templateCreatePost($sd_template_create_request, string $contentType = self::contentTypes['templateCreatePost'][0])
    {
        list($response) = $this->templateCreatePostWithHttpInfo($sd_template_create_request, $contentType);
        return $response;
    }

    /**
     * Operation templateCreatePostWithHttpInfo
     *
     * Create Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateCreateRequest $sd_template_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCreatePost'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templateCreatePostWithHttpInfo($sd_template_create_request, string $contentType = self::contentTypes['templateCreatePost'][0])
    {
        $request = $this->templateCreatePostRequest($sd_template_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateCreatePostAsync
     *
     * Create Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateCreateRequest $sd_template_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateCreatePostAsync($sd_template_create_request, string $contentType = self::contentTypes['templateCreatePost'][0])
    {
        return $this->templateCreatePostAsyncWithHttpInfo($sd_template_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateCreatePostAsyncWithHttpInfo
     *
     * Create Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateCreateRequest $sd_template_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateCreatePostAsyncWithHttpInfo($sd_template_create_request, string $contentType = self::contentTypes['templateCreatePost'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateCreateResponse';
        $request = $this->templateCreatePostRequest($sd_template_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateCreatePost'
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateCreateRequest $sd_template_create_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateCreatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templateCreatePostRequest($sd_template_create_request, string $contentType = self::contentTypes['templateCreatePost'][0])
    {

        // verify the required parameter 'sd_template_create_request' is set
        if ($sd_template_create_request === null || (is_array($sd_template_create_request) && count($sd_template_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_template_create_request when calling templateCreatePost'
            );
        }


        $resourcePath = '/template/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sd_template_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sd_template_create_request));
            } else {
                $httpBody = $sd_template_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateGetAllGet
     *
     * Get All Templates
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetAllGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templateGetAllGet($start, $limit, $filter = null, string $contentType = self::contentTypes['templateGetAllGet'][0])
    {
        list($response) = $this->templateGetAllGetWithHttpInfo($start, $limit, $filter, $contentType);
        return $response;
    }

    /**
     * Operation templateGetAllGetWithHttpInfo
     *
     * Get All Templates
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetAllGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templateGetAllGetWithHttpInfo($start, $limit, $filter = null, string $contentType = self::contentTypes['templateGetAllGet'][0])
    {
        $request = $this->templateGetAllGetRequest($start, $limit, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateGetAllGetAsync
     *
     * Get All Templates
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateGetAllGetAsync($start, $limit, $filter = null, string $contentType = self::contentTypes['templateGetAllGet'][0])
    {
        return $this->templateGetAllGetAsyncWithHttpInfo($start, $limit, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateGetAllGetAsyncWithHttpInfo
     *
     * Get All Templates
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateGetAllGetAsyncWithHttpInfo($start, $limit, $filter = null, string $contentType = self::contentTypes['templateGetAllGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateGetAllResponse[]';
        $request = $this->templateGetAllGetRequest($start, $limit, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateGetAllGet'
     *
     * @param  string $start position in list (required)
     * @param  string $limit maximum templates returned in list (required)
     * @param  string $filter Find a substring within the Template name field (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetAllGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templateGetAllGetRequest($start, $limit, $filter = null, string $contentType = self::contentTypes['templateGetAllGet'][0])
    {

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling templateGetAllGet'
            );
        }

        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling templateGetAllGet'
            );
        }



        $resourcePath = '/template/get-all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateGetGet
     *
     * Get Template
     *
     * @param  string $template_id Template Id such as 3589) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templateGetGet($template_id, string $contentType = self::contentTypes['templateGetGet'][0])
    {
        list($response) = $this->templateGetGetWithHttpInfo($template_id, $contentType);
        return $response;
    }

    /**
     * Operation templateGetGetWithHttpInfo
     *
     * Get Template
     *
     * @param  string $template_id Template Id such as 3589) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templateGetGetWithHttpInfo($template_id, string $contentType = self::contentTypes['templateGetGet'][0])
    {
        $request = $this->templateGetGetRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateGetGetAsync
     *
     * Get Template
     *
     * @param  string $template_id Template Id such as 3589) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateGetGetAsync($template_id, string $contentType = self::contentTypes['templateGetGet'][0])
    {
        return $this->templateGetGetAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateGetGetAsyncWithHttpInfo
     *
     * Get Template
     *
     * @param  string $template_id Template Id such as 3589) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateGetGetAsyncWithHttpInfo($template_id, string $contentType = self::contentTypes['templateGetGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateGetResponse';
        $request = $this->templateGetGetRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateGetGet'
     *
     * @param  string $template_id Template Id such as 3589) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templateGetGetRequest($template_id, string $contentType = self::contentTypes['templateGetGet'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateGetGet'
            );
        }


        $resourcePath = '/template/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $template_id,
            'templateId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateGetTokensGet
     *
     * Get Template Tokens
     *
     * @param  string $template_id The ID of the Template (required)
     * @param  string $start position in list (optional)
     * @param  string $limit maximum templates returned in list (optional)
     * @param  string $include_deleted If true tokens from deleted players are included in the response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetTokensGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templateGetTokensGet($template_id, $start = null, $limit = null, $include_deleted = null, string $contentType = self::contentTypes['templateGetTokensGet'][0])
    {
        list($response) = $this->templateGetTokensGetWithHttpInfo($template_id, $start, $limit, $include_deleted, $contentType);
        return $response;
    }

    /**
     * Operation templateGetTokensGetWithHttpInfo
     *
     * Get Template Tokens
     *
     * @param  string $template_id The ID of the Template (required)
     * @param  string $start position in list (optional)
     * @param  string $limit maximum templates returned in list (optional)
     * @param  string $include_deleted If true tokens from deleted players are included in the response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetTokensGet'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templateGetTokensGetWithHttpInfo($template_id, $start = null, $limit = null, $include_deleted = null, string $contentType = self::contentTypes['templateGetTokensGet'][0])
    {
        $request = $this->templateGetTokensGetRequest($template_id, $start, $limit, $include_deleted, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateGetTokensGetAsync
     *
     * Get Template Tokens
     *
     * @param  string $template_id The ID of the Template (required)
     * @param  string $start position in list (optional)
     * @param  string $limit maximum templates returned in list (optional)
     * @param  string $include_deleted If true tokens from deleted players are included in the response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetTokensGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateGetTokensGetAsync($template_id, $start = null, $limit = null, $include_deleted = null, string $contentType = self::contentTypes['templateGetTokensGet'][0])
    {
        return $this->templateGetTokensGetAsyncWithHttpInfo($template_id, $start, $limit, $include_deleted, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateGetTokensGetAsyncWithHttpInfo
     *
     * Get Template Tokens
     *
     * @param  string $template_id The ID of the Template (required)
     * @param  string $start position in list (optional)
     * @param  string $limit maximum templates returned in list (optional)
     * @param  string $include_deleted If true tokens from deleted players are included in the response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetTokensGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateGetTokensGetAsyncWithHttpInfo($template_id, $start = null, $limit = null, $include_deleted = null, string $contentType = self::contentTypes['templateGetTokensGet'][0])
    {
        $returnType = '\Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponse[]';
        $request = $this->templateGetTokensGetRequest($template_id, $start, $limit, $include_deleted, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateGetTokensGet'
     *
     * @param  string $template_id The ID of the Template (required)
     * @param  string $start position in list (optional)
     * @param  string $limit maximum templates returned in list (optional)
     * @param  string $include_deleted If true tokens from deleted players are included in the response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateGetTokensGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templateGetTokensGetRequest($template_id, $start = null, $limit = null, $include_deleted = null, string $contentType = self::contentTypes['templateGetTokensGet'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateGetTokensGet'
            );
        }





        $resourcePath = '/template/get-tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $template_id,
            'templateId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_deleted,
            'includeDeleted', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateMutatePut
     *
     * Mutate Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateMutateRequest $sd_template_mutate_request sd_template_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateMutatePut'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templateMutatePut($sd_template_mutate_request, string $contentType = self::contentTypes['templateMutatePut'][0])
    {
        list($response) = $this->templateMutatePutWithHttpInfo($sd_template_mutate_request, $contentType);
        return $response;
    }

    /**
     * Operation templateMutatePutWithHttpInfo
     *
     * Mutate Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateMutateRequest $sd_template_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateMutatePut'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templateMutatePutWithHttpInfo($sd_template_mutate_request, string $contentType = self::contentTypes['templateMutatePut'][0])
    {
        $request = $this->templateMutatePutRequest($sd_template_mutate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateMutatePutAsync
     *
     * Mutate Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateMutateRequest $sd_template_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateMutatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateMutatePutAsync($sd_template_mutate_request, string $contentType = self::contentTypes['templateMutatePut'][0])
    {
        return $this->templateMutatePutAsyncWithHttpInfo($sd_template_mutate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateMutatePutAsyncWithHttpInfo
     *
     * Mutate Template
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateMutateRequest $sd_template_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateMutatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateMutatePutAsyncWithHttpInfo($sd_template_mutate_request, string $contentType = self::contentTypes['templateMutatePut'][0])
    {
        $returnType = 'object';
        $request = $this->templateMutatePutRequest($sd_template_mutate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateMutatePut'
     *
     * @param  \Stardust\Core\Stardust\Core\Model\SDTemplateMutateRequest $sd_template_mutate_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateMutatePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templateMutatePutRequest($sd_template_mutate_request, string $contentType = self::contentTypes['templateMutatePut'][0])
    {

        // verify the required parameter 'sd_template_mutate_request' is set
        if ($sd_template_mutate_request === null || (is_array($sd_template_mutate_request) && count($sd_template_mutate_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sd_template_mutate_request when calling templateMutatePut'
            );
        }


        $resourcePath = '/template/mutate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sd_template_mutate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sd_template_mutate_request));
            } else {
                $httpBody = $sd_template_mutate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templatePropsRemoveDelete
     *
     * Remove Template Property
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; } (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatePropsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templatePropsRemoveDelete($template_id, $props, string $contentType = self::contentTypes['templatePropsRemoveDelete'][0])
    {
        list($response) = $this->templatePropsRemoveDeleteWithHttpInfo($template_id, $props, $contentType);
        return $response;
    }

    /**
     * Operation templatePropsRemoveDeleteWithHttpInfo
     *
     * Remove Template Property
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; } (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatePropsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templatePropsRemoveDeleteWithHttpInfo($template_id, $props, string $contentType = self::contentTypes['templatePropsRemoveDelete'][0])
    {
        $request = $this->templatePropsRemoveDeleteRequest($template_id, $props, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templatePropsRemoveDeleteAsync
     *
     * Remove Template Property
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; } (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatePropsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatePropsRemoveDeleteAsync($template_id, $props, string $contentType = self::contentTypes['templatePropsRemoveDelete'][0])
    {
        return $this->templatePropsRemoveDeleteAsyncWithHttpInfo($template_id, $props, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templatePropsRemoveDeleteAsyncWithHttpInfo
     *
     * Remove Template Property
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; } (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatePropsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templatePropsRemoveDeleteAsyncWithHttpInfo($template_id, $props, string $contentType = self::contentTypes['templatePropsRemoveDelete'][0])
    {
        $returnType = 'object';
        $request = $this->templatePropsRemoveDeleteRequest($template_id, $props, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templatePropsRemoveDelete'
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $props Stringify Array of template mutable property names ex: &#39;[\&quot;exp\&quot;, \&quot;health\&quot;]&#39; } (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templatePropsRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templatePropsRemoveDeleteRequest($template_id, $props, string $contentType = self::contentTypes['templatePropsRemoveDelete'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templatePropsRemoveDelete'
            );
        }

        // verify the required parameter 'props' is set
        if ($props === null || (is_array($props) && count($props) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $props when calling templatePropsRemoveDelete'
            );
        }


        $resourcePath = '/template/props-remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $template_id,
            'templateId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $props,
            'props', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation templateRemoveDelete
     *
     * Remove Template
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateRemoveDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Stardust\Core\Stardust\Core\Model\Error
     */
    public function templateRemoveDelete($template_id, string $contentType = self::contentTypes['templateRemoveDelete'][0])
    {
        list($response) = $this->templateRemoveDeleteWithHttpInfo($template_id, $contentType);
        return $response;
    }

    /**
     * Operation templateRemoveDeleteWithHttpInfo
     *
     * Remove Template
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateRemoveDelete'] to see the possible values for this operation
     *
     * @throws \Stardust\Core\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Stardust\Core\Stardust\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function templateRemoveDeleteWithHttpInfo($template_id, string $contentType = self::contentTypes['templateRemoveDelete'][0])
    {
        $request = $this->templateRemoveDeleteRequest($template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Stardust\Core\Stardust\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Stardust\Core\Stardust\Core\Model\Error' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Stardust\Core\Stardust\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Stardust\Core\Stardust\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation templateRemoveDeleteAsync
     *
     * Remove Template
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateRemoveDeleteAsync($template_id, string $contentType = self::contentTypes['templateRemoveDelete'][0])
    {
        return $this->templateRemoveDeleteAsyncWithHttpInfo($template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation templateRemoveDeleteAsyncWithHttpInfo
     *
     * Remove Template
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function templateRemoveDeleteAsyncWithHttpInfo($template_id, string $contentType = self::contentTypes['templateRemoveDelete'][0])
    {
        $returnType = 'object';
        $request = $this->templateRemoveDeleteRequest($template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'templateRemoveDelete'
     *
     * @param  string $template_id Template Id returned from template/create (ex. 5) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['templateRemoveDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function templateRemoveDeleteRequest($template_id, string $contentType = self::contentTypes['templateRemoveDelete'][0])
    {

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling templateRemoveDelete'
            );
        }


        $resourcePath = '/template/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $template_id,
            'templateId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
