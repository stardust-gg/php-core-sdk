<?php
/**
 * SDTokenGetResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stardust API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stardust\Core\Stardust\Core\Model;

use \ArrayAccess;
use \Stardust\Core\ObjectSerializer;

/**
 * SDTokenGetResponse Class Doc Comment
 *
 * @category Class
 * @description token data
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SDTokenGetResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SDTokenGetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'game_id' => 'int',
        'template_id' => 'int',
        'id' => 'int',
        'name' => 'string',
        'flags' => 'int',
        'props' => '\Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponseTokenProps',
        'owner' => 'string',
        'public_metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'game_id' => null,
        'template_id' => null,
        'id' => null,
        'name' => null,
        'flags' => null,
        'props' => null,
        'owner' => null,
        'public_metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'game_id' => false,
		'template_id' => false,
		'id' => false,
		'name' => false,
		'flags' => false,
		'props' => false,
		'owner' => false,
		'public_metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'game_id' => 'gameId',
        'template_id' => 'templateId',
        'id' => 'id',
        'name' => 'name',
        'flags' => 'flags',
        'props' => 'props',
        'owner' => 'owner',
        'public_metadata' => 'publicMetadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'game_id' => 'setGameId',
        'template_id' => 'setTemplateId',
        'id' => 'setId',
        'name' => 'setName',
        'flags' => 'setFlags',
        'props' => 'setProps',
        'owner' => 'setOwner',
        'public_metadata' => 'setPublicMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'game_id' => 'getGameId',
        'template_id' => 'getTemplateId',
        'id' => 'getId',
        'name' => 'getName',
        'flags' => 'getFlags',
        'props' => 'getProps',
        'owner' => 'getOwner',
        'public_metadata' => 'getPublicMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('game_id', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('props', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('public_metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['game_id'] === null) {
            $invalidProperties[] = "'game_id' can't be null";
        }
        if (($this->container['game_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'game_id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['game_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'game_id', must be bigger than or equal to 0.";
        }

        if ($this->container['template_id'] === null) {
            $invalidProperties[] = "'template_id' can't be null";
        }
        if (($this->container['template_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'template_id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['template_id'] < 0)) {
            $invalidProperties[] = "invalid value for 'template_id', must be bigger than or equal to 0.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if (($this->container['flags'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'flags', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['flags'] < 0)) {
            $invalidProperties[] = "invalid value for 'flags', must be bigger than or equal to 0.";
        }

        if ($this->container['props'] === null) {
            $invalidProperties[] = "'props' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets game_id
     *
     * @return int
     */
    public function getGameId()
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int $game_id Game ID Number (unsigned 32 bit integer)
     *
     * @return self
     */
    public function setGameId($game_id)
    {
        if (is_null($game_id)) {
            throw new \InvalidArgumentException('non-nullable game_id cannot be null');
        }

        if (($game_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $game_id when calling SDTokenGetResponse., must be smaller than or equal to 2147483647.');
        }
        if (($game_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $game_id when calling SDTokenGetResponse., must be bigger than or equal to 0.');
        }

        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id Template ID Number (unsigned 32 bit integer)
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            throw new \InvalidArgumentException('non-nullable template_id cannot be null');
        }

        if (($template_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling SDTokenGetResponse., must be smaller than or equal to 2147483647.');
        }
        if (($template_id < 0)) {
            throw new \InvalidArgumentException('invalid value for $template_id when calling SDTokenGetResponse., must be bigger than or equal to 0.');
        }

        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the token created
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if (($id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SDTokenGetResponse., must be smaller than or equal to 2147483647.');
        }
        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SDTokenGetResponse., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the template
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int $flags flags
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }

        if (($flags > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $flags when calling SDTokenGetResponse., must be smaller than or equal to 2147483647.');
        }
        if (($flags < 0)) {
            throw new \InvalidArgumentException('invalid value for $flags when calling SDTokenGetResponse., must be bigger than or equal to 0.');
        }

        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets props
     *
     * @return \Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponseTokenProps
     */
    public function getProps()
    {
        return $this->container['props'];
    }

    /**
     * Sets props
     *
     * @param \Stardust\Core\Stardust\Core\Model\SDTemplateGetTokensResponseTokenProps $props props
     *
     * @return self
     */
    public function setProps($props)
    {
        if (is_null($props)) {
            throw new \InvalidArgumentException('non-nullable props cannot be null');
        }
        $this->container['props'] = $props;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Game Owner's Public Key
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets public_metadata
     *
     * @return object|null
     */
    public function getPublicMetadata()
    {
        return $this->container['public_metadata'];
    }

    /**
     * Sets public_metadata
     *
     * @param object|null $public_metadata Returned to marketplaces as token metadata
     *
     * @return self
     */
    public function setPublicMetadata($public_metadata)
    {
        if (is_null($public_metadata)) {
            throw new \InvalidArgumentException('non-nullable public_metadata cannot be null');
        }
        $this->container['public_metadata'] = $public_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


