<?php
/**
 * SDTemplateCreateBulk
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stardust API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023-05-08T04:33:59Z
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stardust\Core\Stardust\Core\Model;

use \ArrayAccess;
use \Stardust\Core\ObjectSerializer;

/**
 * SDTemplateCreateBulk Class Doc Comment
 *
 * @category Class
 * @package  Stardust\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SDTemplateCreateBulk implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SDTemplateCreateBulk';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'cap' => 'string',
        'contract_type' => 'string',
        'type' => 'string',
        'image' => 'string',
        'description' => 'string',
        'active_listing' => 'bool',
        'owner_address' => 'string',
        'props' => '\Stardust\Core\Stardust\Core\Model\SDTemplateCreateBulkProps',
        'public_contract_metadata' => 'object',
        'public_token_metadata' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'cap' => null,
        'contract_type' => null,
        'type' => null,
        'image' => null,
        'description' => null,
        'active_listing' => null,
        'owner_address' => null,
        'props' => null,
        'public_contract_metadata' => null,
        'public_token_metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'cap' => false,
		'contract_type' => false,
		'type' => false,
		'image' => false,
		'description' => false,
		'active_listing' => false,
		'owner_address' => false,
		'props' => false,
		'public_contract_metadata' => false,
		'public_token_metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'cap' => 'cap',
        'contract_type' => 'contractType',
        'type' => 'type',
        'image' => 'image',
        'description' => 'description',
        'active_listing' => 'activeListing',
        'owner_address' => 'ownerAddress',
        'props' => 'props',
        'public_contract_metadata' => 'publicContractMetadata',
        'public_token_metadata' => 'publicTokenMetadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'cap' => 'setCap',
        'contract_type' => 'setContractType',
        'type' => 'setType',
        'image' => 'setImage',
        'description' => 'setDescription',
        'active_listing' => 'setActiveListing',
        'owner_address' => 'setOwnerAddress',
        'props' => 'setProps',
        'public_contract_metadata' => 'setPublicContractMetadata',
        'public_token_metadata' => 'setPublicTokenMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'cap' => 'getCap',
        'contract_type' => 'getContractType',
        'type' => 'getType',
        'image' => 'getImage',
        'description' => 'getDescription',
        'active_listing' => 'getActiveListing',
        'owner_address' => 'getOwnerAddress',
        'props' => 'getProps',
        'public_contract_metadata' => 'getPublicContractMetadata',
        'public_token_metadata' => 'getPublicTokenMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTRACT_TYPE_ERC721 = 'ERC721';
    public const TYPE_FT = 'FT';
    public const TYPE_NFT = 'NFT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContractTypeAllowableValues()
    {
        return [
            self::CONTRACT_TYPE_ERC721,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FT,
            self::TYPE_NFT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cap', $data ?? [], null);
        $this->setIfExists('contract_type', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('active_listing', $data ?? [], null);
        $this->setIfExists('owner_address', $data ?? [], null);
        $this->setIfExists('props', $data ?? [], null);
        $this->setIfExists('public_contract_metadata', $data ?? [], null);
        $this->setIfExists('public_token_metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getContractTypeAllowableValues();
        if (!is_null($this->container['contract_type']) && !in_array($this->container['contract_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'contract_type', must be one of '%s'",
                $this->container['contract_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the template (ex. Bronze Axe)
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cap
     *
     * @return string|null
     */
    public function getCap()
    {
        return $this->container['cap'];
    }

    /**
     * Sets cap
     *
     * @param string|null $cap u96 Number as String (ex. 200000000), default 39614081257132168796771975168
     *
     * @return self
     */
    public function setCap($cap)
    {
        if (is_null($cap)) {
            throw new \InvalidArgumentException('non-nullable cap cannot be null');
        }
        $this->container['cap'] = $cap;

        return $this;
    }

    /**
     * Gets contract_type
     *
     * @return string|null
     */
    public function getContractType()
    {
        return $this->container['contract_type'];
    }

    /**
     * Sets contract_type
     *
     * @param string|null $contract_type The type of custom contract to use for this template. Default will use a shared contract.
     *
     * @return self
     */
    public function setContractType($contract_type)
    {
        if (is_null($contract_type)) {
            throw new \InvalidArgumentException('non-nullable contract_type cannot be null');
        }
        $allowedValues = $this->getContractTypeAllowableValues();
        if (!in_array($contract_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'contract_type', must be one of '%s'",
                    $contract_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contract_type'] = $contract_type;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image url
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of template
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets active_listing
     *
     * @return bool|null
     */
    public function getActiveListing()
    {
        return $this->container['active_listing'];
    }

    /**
     * Sets active_listing
     *
     * @param bool|null $active_listing Set if the Template is active or not
     *
     * @return self
     */
    public function setActiveListing($active_listing)
    {
        if (is_null($active_listing)) {
            throw new \InvalidArgumentException('non-nullable active_listing cannot be null');
        }
        $this->container['active_listing'] = $active_listing;

        return $this;
    }

    /**
     * Gets owner_address
     *
     * @return string|null
     */
    public function getOwnerAddress()
    {
        return $this->container['owner_address'];
    }

    /**
     * Sets owner_address
     *
     * @param string|null $owner_address Blockchain address to set as owner of the custom contract, if contractType is passed in.
     *
     * @return self
     */
    public function setOwnerAddress($owner_address)
    {
        if (is_null($owner_address)) {
            throw new \InvalidArgumentException('non-nullable owner_address cannot be null');
        }
        $this->container['owner_address'] = $owner_address;

        return $this;
    }

    /**
     * Gets props
     *
     * @return \Stardust\Core\Stardust\Core\Model\SDTemplateCreateBulkProps|null
     */
    public function getProps()
    {
        return $this->container['props'];
    }

    /**
     * Sets props
     *
     * @param \Stardust\Core\Stardust\Core\Model\SDTemplateCreateBulkProps|null $props props
     *
     * @return self
     */
    public function setProps($props)
    {
        if (is_null($props)) {
            throw new \InvalidArgumentException('non-nullable props cannot be null');
        }
        $this->container['props'] = $props;

        return $this;
    }

    /**
     * Gets public_contract_metadata
     *
     * @return object|null
     */
    public function getPublicContractMetadata()
    {
        return $this->container['public_contract_metadata'];
    }

    /**
     * Sets public_contract_metadata
     *
     * @param object|null $public_contract_metadata Returned to marketplaces as contract metadata
     *
     * @return self
     */
    public function setPublicContractMetadata($public_contract_metadata)
    {
        if (is_null($public_contract_metadata)) {
            throw new \InvalidArgumentException('non-nullable public_contract_metadata cannot be null');
        }
        $this->container['public_contract_metadata'] = $public_contract_metadata;

        return $this;
    }

    /**
     * Gets public_token_metadata
     *
     * @return object|null
     */
    public function getPublicTokenMetadata()
    {
        return $this->container['public_token_metadata'];
    }

    /**
     * Sets public_token_metadata
     *
     * @param object|null $public_token_metadata Inherited by tokens, and returned to marketplaces as token metadata
     *
     * @return self
     */
    public function setPublicTokenMetadata($public_token_metadata)
    {
        if (is_null($public_token_metadata)) {
            throw new \InvalidArgumentException('non-nullable public_token_metadata cannot be null');
        }
        $this->container['public_token_metadata'] = $public_token_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


